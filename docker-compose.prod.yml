services:
  # --------------------------
  # 1) MQTTT Broker
  # --------------------------
  mosquitto:
    image: eclipse-mosquitto
    container_name: mosquitto
    ports:
      - "1883:1883"  # MQTT default port
    volumes:
      - ./mosquitto/config:/mosquitto/config  # Mount custom config
      - ./mosquitto/data:/mosquitto/data      # Persist broker data
      - ./mosquitto/log:/mosquitto/log       # Persist logs
    restart: always
    networks:
      - my-network
    environment:
      VIRTUAL_HOST: "cgp.captechvn.com"
      VIRTUAL_PORT: "1883"
      LETSENCRYPT_HOST: "cgp.captechvn.com"
      LETSENCRYPT_EMAIL: "chauanphu@gmail.com"
    
  # --------------------------
  # 2) Databases
  # --------------------------
  mongodb:
    image: mongo:6.0
    container_name: mongodb
    restart: always
    volumes:
      - ./mongo_data:/data/db
    networks:
      - my-network
  # --------------------------
  # 3) Redis Cache
  # --------------------------
  redis-cache:
    image: redis:6.0
    container_name: redis-cache
    restart: always
    volumes:
      - ./redis_data:/data
    networks:
      - my-network
  # --------------------------
  # 4) FastAPI App
  # --------------------------
  fastapi-app:
    image: chauanphu/fastapi-scada:latest
    container_name: fastapi-app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 5s
      timeout: 2s
      retries: 20
    env_file:
      - .env
    environment:
      VIRTUAL_HOST: "..."
      VIRTUAL_PORT: "..."
      LETSENCRYPT_HOST: "..."
      LETSENCRYPT_EMAIL: "..."
    depends_on:
      - mongodb
      - redis-cache
      - mosquitto
    volumes:
      - ./logs:/app/logs
    ports:
      - "3000:3000"
    networks:
      - my-network
  # --------------------------
  # 5) reactjs-app
  # --------------------------
  reactjs-app:
    image: chauanphu/scada-reactjs:latest
    container_name: reactjs-app
    restart: unless-stopped
    environment:
      VIRTUAL_HOST: "..."
      VIRTUAL_PORT: "80"
      LETSENCRYPT_HOST: "..."
      LETSENCRYPT_EMAIL: "..."
      NODE_ENV: production
    networks:
      - my-network
  # --------------------------
  # 5) Nginx Reverse Proxy
  # --------------------------
  nginx-proxy:
    image: jwilder/nginx-proxy:alpine
    container_name: nginx-proxy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro  # Required for container auto-discovery
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/vhost.d:/etc/nginx/vhost.d
      - ./nginx/certs:/etc/nginx/certs
      - ./nginx/html:/usr/share/nginx/html  # Ensure this exists for ACME challenge
      - ./nginx/conf.d:/etc/nginx/conf.d
    depends_on:
      - fastapi-app
      - mosquitto
    networks:
      - my-network
  # ---------------------------------------------
  # 6) LETSENCRYPT COMPANION: SSL Automation
  # ---------------------------------------------
  acme-companion:
    image: nginxproxy/acme-companion
    container_name: acme-companion
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro # Required for container auto-discovery
      - ./nginx/vhost.d:/etc/nginx/vhost.d:ro
      - ./nginx/certs:/etc/nginx/certs
      - ./nginx/html:/usr/share/nginx/html  # Ensure this exists for ACME challenge
      - ./acme:/etc/acme.sh
    depends_on:
      - nginx-proxy
    environment:
      NGINX_PROXY_CONTAINER: "nginx-proxy"
      DEFAULT_EMAIL: "..."
    networks:
      - my-network
networks:
  my-network:
    driver: bridge